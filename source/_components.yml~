---
components:
  - &language_identifier
    name: Language Identifier
    repository: https://github.com/opener-project/language-identifier
    webservice: http://opener.olery.com/language-identifier
    description:
      Language identifier receives plain text and outputs the language of the input text.
      The identified language can be used as a parameter to the OpeNER modules that require a language parameter.
  - &tokenizer
    name: Tokenizer
    repository: https://github.com/opener-project/tokenizer
    webservice: http://opener.olery.com/tokenizer
    description:
      The tokenizer receives plain text as input and a language parameter.
      It splits it in paragraphs, sentences and tokens and generates a KAF document with this information.
      The resulting KAF document can be used as input to other modules.
  - &tree_tagger
    name: Tree Tagger
    repository: https://github.com/opener-project/opener-tree-tagger
    webservice: http://opener.olery.com/tree-tagger
    description:
      This tool implements a wrapper for TreeTagger (http://www.cis.uni-muenchen.de/~schmid/tools/TreeTagger) allowing to
      apply this tagger to KAF files and obtain the result also in KAF format. It provides the lemmas and part-of-speech
      tags of the tokens in a given text and works for all the OpeNER languages. The tagset used is the one specified in the
      KAF definition, but the real tags from TreeTagger are also stored in the result.
  - &pos_tagger
    name: POS Tagger
    repository: https://github.com/opener-project/pos-tagger
    webservice: http://opener.olery.com/pos-tagger
    description:
      Part of Speech Tagging means identifying whether each word is a noun, a verb, etc. This component provides
      Part of Speech Perceptron and Maximum Entropy Models for English, Spanish, French, Italian and Dutch.
      The models have been trained with the Apache OpenNLP Machine Learning API. The component also provides
      dictionary-based lemmatization which consists of identifying the lemma (dictionary entry) for a given word.
  - &ner
    name: NER
    repository: https://github.com/opener-project/ner
    webservice: http://opener.olery.com/ner
    description:
      Named Entity Recognition and Classification identifies names of persons, cities, museums, and classifies them in a
      semantic class (PERSON, LOCATION, etc.). This component uses the Apache OpenNLP API to provide Perceptron and
      Maximum Entropy models trained for Dutch, English, French, German, Italian and Spanish.
  - &ned
    name: NED
    repository: https://github.com/opener-project/ned
    webservice: http://opener.olery.com/ned
    description:
      For a given Named Entity detected by the NER, the Named Entity Disambiguation component aims at identifying to
      which actual entity in a catalogue such name is referring to. This component is a client to query DBPedia Spotlight
      (http://spotlight.dbpedia.org).
  - &coreference
    name: Coreference
    repository: https://github.com/opener-project/coreference
    webservice: http://opener.olery.com/coreference
    description:
      Coreference resolution aims at identifying every word which refers to the same object or entity.
      This component is loosely based on the Stanford Multi Sieve Coreference resolution
      system (https://http://www-nlp.stanford.edu/software/dcoref.shtml). The coreference resolution system uses all
      the linguistic information provided by the tokenizer, pos tagger, NER, NED and constituent parser.
  - &constituent
    name: Constituent Parser
    repository: https://github.com/opener-project/constituent-parser
    webservice: http://opener.olery.com/constituent-parser
    description:
      Parsing means providing the syntactic tree representation of a sentence. This component provides shift-reduced style
      constituent parsers for English, French, Italian and Spanish trained using the Apache OpenNLP API. Constituent parsing
      is primarily used in OpeNER as an input to the Coreference resolution system.
  - &property_tagger
    name: Property Tagger
    repository: https://github.com/opener-project/property-tagger
    webservice: http://opener.olery.com/property-tagger
    description:
      This module implements a tagger for hotel properties. It detects aspect words
      which represent aspect or properties of a hotel, and links them with the correct aspect class.
      These properties are important because they are usually the target of the opinions. For instance,
      it would detect that "bed" or "mattress" are hotel properties related to the aspect SLEEPING_COMFORT.
      It works for all the OpeNER languages and it is based on the KAF format for the input/output files.
  - &polarity_tagger
    name: Polarity Tagger
    repository: https://github.com/opener-project/polarity-tagger
    webservice: http://opener.olery.com/polarity-tagger
    description:
      The polarity tagger assigns polarity information to words on the text. This polarity information contains
      basically the positive/negative content of the word (good, cheap, clean can be positive words in the hotel
      domain), and words which are polarity modifiers (negators, intensifiers, ...). This tool is based on a set
      of lexicons which contain the polarity information, but new custom lexicons can be added. The polarity
      information will be used to detect and extract complete opinions.
  - &opinion_detector_basic
    name: Opinion Detector Basic
    repository: https://github.com/opener-project/opinion-detector-basic
    webservice: http://opener.olery.com/opinion-detector-basic
    description:
      The opinion detector basic detects and extracts fine-grained opinions on an input KAF file. In particular
      the opinion expression (the actual opinion), the target (what is the opinion about) and the holder (who is
      expressing the opinion) will be detected for each opinion. This basic version is based on the evidence
      provided by the polarity information and a set of rules.
  - &opinion_detector_deluxe
    name: Opinion Detector Deluxe
    repository: https://github.com/opener-project/opinion-detector
    webservice: http://opener.olery.com/opinion-detector
    description:
      The opinion detector deluxe also extracts fine-grained opinions as the basic version. It is based on
      Machine Learning, using two Artificial Intelligence algorithms (Conditional Random Fields and Support
      Vector Machines) to induce models from annotated data. Models for hotel, restaurants and attractions reviews
      are provided, as well as for political news, but the tool allows to train a new model for a new domain if
      the annotated data for the new domain is available.
  - &outlet
    name: Outlet
    repository: https://github.com/opener-project/outlet
    webservice: http://opener.olery.com/outlet
    description:
      The outlet is a component that stores its inputs into a MySQL database.
      Given the right unique id it also retrieves the files from the database.
  - &s3_outlet
    name: S3 Outlet
    repository: https://github.com/opener-project/s3-outlet
    webservice: http://opener.olery.com/s3-outlet
    description:
      The S3 outlet is a modified version of the normal outlet. It uses
      Amazon S3 to store the input. When using the S3 outlet you can specify specific
      buckets and directories.
  - &kaf_to_json
    name: kaf2json
    repository: https://github.com/opener-project/kaf2json
    webservice: http://opener.olery.com/kaf2json
    description:
      XML is not always the best format to display results. That's why there is a
      kaf-to-json parser that transforms any KAF document to a rougly equivalent JSON object.
  - &kaf_naf_parser
    name: kaf-naf parser
    repository: https://github.com/opener-project/kaf-naf-parser
    webservice: http://opener.olery.com/kaf-naf-parser
    description:
      The KAF-NAF parser can translate KAF to NAF, and NAF to KAF. KAF is the
      format used by OpeNER. NAF is a slightly different format used by
      for example the NewsReader project.
  - &scorer
    name: Sentiment Scores
    repository: https://github.com/opener-project/scorer
    webservice: http://opener.olery.com/scorer
    description:
      This component aggregates all sentiments found in a document and
      calculates an overall sentiment score as well as sentiment scores for the
      individual properties detected. The resulting score ranges from -1 to 1.

toolkits: &toolkits
  -
    name: Lexical acquisition toolkit
    repository: https://github.com/opener-project/opinion-domain-lexicon-acquisition
  -
    name: Lexicon propagation toolkit
    repository: https://github.com/opener-project/VU-lexicon-propagation_kernel
  -
    name: Domain adaptation toolkit
    repository: https://github.com/opener-project/domain-adaptation-tool

clusters:
  - &c_input_tools
    name: Input Tools
    components: [*language_identifier]
    description:
      This collection of components is used to start OpeNER pipelines. For now a
      language identifier is available.
  - &c_foundation
    name: Basics
    components: [*tokenizer, *pos_tagger, *tree_tagger]
    description:
      These components are the start of each OpeNER pipeline. Every further operation
      needs tokens, polarities and lemmas. For your convenience multiple POS taggers
      are available.
  - &c_nerned
    name: NER/NED/Co-reference
    components: [*ner, *ned, *coreference, *constituent]
    description:
      Combined this group of components delivers you state of the art Named Entity
      Recognition and Named Entity Disambiguation.
  - &c_polarity
    name: Polarity, Properties and Opinions
    components: [*property_tagger, *polarity_tagger, *opinion_detector_basic, *opinion_detector_deluxe]
    description:
      Combined these components deliver you top notch opinion detection on texts
      in general, as well as on detected properties. The basic detector is rule based,
      and the deluxe detector is machine learned.
  - &c_storage
    name: Storage
    components: [*outlet, *s3_outlet]
    description:
      These components can store results of opener pipelines into the database
      or on amazon s3. You can use them as webservices, or use them as examples
      on how to build your own storage solutions.
  - &c_converters
    name: Converters
    components: [*kaf_to_json, *kaf_naf_parser]
    description:
      KAF is a nice format, but there are others. JSON for example is well known,
      and often hooks into nice javascript visualisations. NAF is more like
      KAF evolved, used in several other NLP projects.
  - &c_processors
    name: Processors / Aggregators
    components: [*scorer]
    description:
      These components aggregate, change, calculate or change the KAF document in
      any way. Where most other components have a KAF-in KAF-out policy the processors
      will output completely different formats.
  - &c_toolkits
    name: Toolkits
    components: *toolkits
    description:
      While making all other components, we created several tools to annotate texts
      and to adapt components for different languages and domains. The most useful
      tools are listed below.

webservices:
  - *c_input_tools
  - *c_foundation
  - *c_nerned
  - *c_polarity
  - *c_storage
  - *c_converters
  - *c_processors

datasets: &datasets
  -
    name: Sentiment on Social Media Classifier training sets
    documentation: http://wafi.iit.cnr.it/openervm/weka/results/FB.php
    filetype: ARFF
  -
    name: Tourpedia Named Entities OD dataset
    documentation: http://tour-pedia.org
    filetype: JSON, CSV
  -
    name: Tourpedia Named Entities LOD dataset
    documentation: http://tour-pedia.org
    filetype: RDF
  -
    name: Entity Resource Linker (Tour-pedia api)
    documentation:  http://tour-pedia.org/api
    filetype: Api
  -
    name: "Ent-i-tUp: Social and Media Analysis and Monitoring application"
    documentation: http://128.65.123.12/entitup/login.php
    filetype: Mongodump
  -
   name: ESTHER Corpus
   documentation: http://catalog.elra.info/product_info.php?products_id=999
   filetype: XML
  -
   name: French Treebank
   documentation: http://www.llf.cnrs.fr/Gens/Abeille/French-Treebank-fr.php
   filetype: XML
  -
   name: French MWN Laporte
   documentation: http://infolingu.univ-mlv.fr/english/
   filetype: XML

   name: WOLF french WordNET
   documentation: http://alpage.inria.fr/~sagot/wolf-en.html
   filetype: XML
  -
   name: MCR 3.0
   documentation: http://adimen.si.ehu.es/web/MCR
   filetype: CSV database
  -
   name: Reuters corpus
   documentation: http://trec.nist.gov/data/reuters/reuters.html
   filetype:
  -
   name: ECI Multilingual Corpus
   documentation: http://www.ldc.upenn.edu/Catalog/CatalogEntry.jsp?catalogId=LDC94T5
   filetype:
  -
   name: I-CAB
   documentation: http://ontotext.fbk.eu/i-cab/download-icab.html
   filetype:
  -
   name: CoNLL 2002
   documentation: http://www.cnts.ua.ac.be/conll2002/ner/
   filetype:
  -
   name: Ontonotes 4.0
   documentation: https://catalog.ldc.upenn.edu/LDC2011T03
   filetype:
  -
   name: Penn Treebank
   documentation: http://www.cis.upenn.edu/~treebank/home.html
   filetype:
  -
   name: Ancora
   documentation: http://clic.ub.edu/corpus/ancora
   filetype:
  -
   name: SemEval Coreference 2010
   documentation: http://stel.ub.edu/semeval2010-coref/
   filetype:

lexicons: &lexicons
  -
    name: Sentiment Lexicons
    documentation: https://github.com/opener-project/sentiment-lexicons
  -
    name: Polarity Lexicons
    documentation: https://github.com/opener-project/general-polarity-lexicons
  -
    name: Propagation Lexicons
    documentation: https://github.com/opener-project/VU-propagation-lexicons_ALL_LANGS_data

documentation:
  components:
    - *c_input_tools
    - *c_foundation
    - *c_nerned
    - *c_polarity
    - *c_storage
    - *c_converters
    - *c_processors
    - *c_toolkits
  lexicons: *lexicons
  datasets: *datasets
  other:
    -
      name: KAF
      documentation: https://github.com/opener-project/kaf/wiki/KAF-structure-overview
    -
      name: KAF JSON
      documentation: https://github.com/opener-project/kaf2json
    -
      name: OpeNER LMF
      documentation: https://dl.dropboxusercontent.com/u/43647591/deliverablesOpeNER/OpeNER_D5.31.pdf

